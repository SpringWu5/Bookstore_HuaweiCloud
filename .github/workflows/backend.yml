name: Backend CI/CD

on:
  push:
    branches: [ "master", "main" ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend.yml'
    tags:        
      - 'v*'
  pull_request:
    branches: [ "master", "main" ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend.yml'
  release:
    types: [published]

jobs:
  test:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven and run tests
      run: mvn -B test jacoco:report --file pom.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: '**/target/site/jacoco/jacoco.xml'
        flags: unittests
        name: codecov-umbrella

  integration-test:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 123
          MYSQL_DATABASE: campus_service
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven and run integration tests
      run: mvn -B verify jacoco:report
      env:
        SPRING_PROFILES_ACTIVE: test
        SKY_DATASOURCE_HOST: localhost
        SKY_DATASOURCE_PORT: 3306
        SKY_DATASOURCE_DATABASE: campus_service
        SKY_DATASOURCE_USERNAME: root
        SKY_DATASOURCE_PASSWORD: 123
        SKY_REDIS_HOST: localhost
        SKY_REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: '**/target/site/jacoco/jacoco.xml'
        flags: unittests
        name: codecov-umbrella

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: production
    needs: [test, integration-test]
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'release' && github.event.action == 'published')

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and package with Maven
      run: mvn -B package -DskipTests --file backend/pom.xml

    - name: Get JAR file name
      id: get_jar
      run: |
        JAR_FILE=$(find second-server/target -name "*.jar" -type f | head -n 1)
        echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "JAR file: $JAR_FILE"
      working-directory: backend

    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: ${{ steps.get_jar.outputs.jar_file }}

    - name: Deploy to Server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        source: "backend/${{ steps.get_jar.outputs.jar_file }}"
        target: "/home/deployer/campus-mall-app/"

    - name: Stop existing application
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          # Stop any existing application processes
          sudo pkill -f "second-server.*\\.jar" || true
        sleep 5
        # Force kill if still running
        sudo pkill -9 -f "second-server.*\\.jar" || true
        sleep 2
        echo "Application stopped successfully"

    - name: Create necessary directories and move JAR to root
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          mkdir -p /home/deployer/campus-mall-app/logs
          # Find and move the JAR file to the root directory for easier management
          JAR_PATH=$(find /home/deployer/campus-mall-app -name "*.jar" -type f | head -n 1)
          if [ -n "$JAR_PATH" ]; then
            echo "Moving JAR file from $JAR_PATH to root directory"
            mv "$JAR_PATH" /home/deployer/campus-mall-app/
            # Remove the nested directories that are no longer needed
            rm -rf /home/deployer/campus-mall-app/backend/
          fi

    - name: Start application
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          cd /home/deployer/campus-mall-app
          # Find the JAR file in the root directory
          JAR_FILE=$(basename "$(find . -maxdepth 1 -name "*.jar" -type f | head -n 1)")
          if [ -z "$JAR_FILE" ]; then
            echo "ERROR: No JAR file found in /home/deployer/campus-mall-app!"
            exit 1
          fi
          echo "Found JAR file: $JAR_FILE"
          
          chmod +x "$JAR_FILE"
          # Set up environment variables for the production configuration
          export SPRING_PROFILES_ACTIVE=prod
          nohup java -jar "$JAR_FILE" > logs/app.log 2>&1 &
          echo "Application started with PID $!"
          sleep 10